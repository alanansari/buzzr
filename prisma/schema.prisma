generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  password      String?
  GameSessions  GameSession[]
  quizzes       Quiz[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  thumbnail    String?
  gameSessions GameSession[]
  questions    Question[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id        String         @id @default(cuid())
  title     String
  quizId    String
  createdAt DateTime       @default(now())
  timeOut   Int            @default(15)
  media     String?
  mediaType String?
  order     Int            @default(1)
  options   Option[]
  answers   PlayerAnswer[]
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Option {
  id         String         @id @default(cuid())
  title      String
  isCorrect  Boolean
  questionId String
  createdAt  DateTime       @default(now())
  question   Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers    PlayerAnswer[]
}

model Player {
  id          String            @id @default(cuid())
  name        String
  gameId      String?
  createdAt   DateTime          @default(now())
  profilePic  String?
  leaderboard GameLeaderboard[]
  game        GameSession?      @relation(fields: [gameId], references: [id])
  answers     PlayerAnswer[]
}

model GameSession {
  id              String            @id @default(cuid())
  quizId          String
  creatorId       String
  gameCode        String            @unique
  gameState       GameStates        @default(question)
  isPlaying       Boolean           @default(false)
  currentQuestion Int               @default(0)
  createdAt       DateTime          @default(now())
  leaderboard     GameLeaderboard[]
  creator         User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  quiz            Quiz              @relation(fields: [quizId], references: [id], onDelete: Cascade)
  players         Player[]
  PlayerAnswer    PlayerAnswer[]
}

model GameLeaderboard {
  id            String       @id @default(cuid())
  playerId      String
  gameSessionId String?
  score         Int          @default(0)
  GameSession   GameSession? @relation(fields: [gameSessionId], references: [id])
  Player        Player       @relation(fields: [playerId], references: [id])

  @@unique([playerId, gameSessionId])
}

model PlayerAnswer {
  id            String      @id @default(cuid())
  playerId      String
  questionId    String
  optionId      String
  gameSessionId String
  timeTaken     Int
  isCorrect     Boolean
  score         Int         @default(0)
  GameSession   GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  Option        Option      @relation(fields: [optionId], references: [id], onDelete: Cascade)
  Player        Player      @relation(fields: [playerId], references: [id], onDelete: Cascade)
  Question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([playerId, questionId, gameSessionId])
}

enum GameStates {
  question
  answer
  leaderboard
}
